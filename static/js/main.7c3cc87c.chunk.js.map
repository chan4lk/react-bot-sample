{"version":3,"sources":["cards/password-card.js","cards/index.js","WebChat.js","App.js","reportWebVitals.js","index.js"],"names":["PasswordCard","payload","config","postBack","useSendPostBack","hooks","card","type","version","body","url","text","actions","title","adaptiveCard","AdaptiveCards","hostConfig","fontFamily","onExecuteAction","action","alert","parse","renderedCard","render","ref","n","childNodes","length","appendChild","activityMiddleware","next","activity","nextVisibleActivity","otherArgs","name","attachmentMiddleware","attachment","contentType","content","owner","WebChat","className","onFetchToken","store","token","directLine","useMemo","createDirectLine","styleSet","createStyleSet","backgroundColor","useEffect","dispatch","App","createStore","value","language","window","navigator","from","role","setNewMessage","useState","setToken","handleFetchToken","useCallback","a","fetch","method","res","json","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7c3cc87c.chunk.js","sourcesContent":["import React from 'react';\r\nimport * as AdaptiveCards from 'adaptivecards';\r\nimport { hooks } from 'botframework-webchat';\r\nexport const PasswordCard = ({ payload, config }) => {\r\n  const { useSendPostBack } = hooks;\r\n  const postBack = useSendPostBack();\r\n  var card = payload || {\r\n    type: 'AdaptiveCard',\r\n    version: '1.0',\r\n    body: [\r\n      {\r\n        type: 'Image',\r\n        url: 'https://adaptivecards.io/content/adaptive-card-50.png',\r\n      },\r\n      {\r\n        type: 'TextBlock',\r\n        text: 'Hello **Adaptive Cards!**',\r\n      },\r\n    ],\r\n    actions: [\r\n      {\r\n        type: 'Action.OpenUrl',\r\n        title: 'Learn more',\r\n        url: 'https://adaptivecards.io',\r\n      },\r\n      {\r\n        type: 'Action.OpenUrl',\r\n        title: 'GitHub',\r\n        url: 'https://github.com/Microsoft/AdaptiveCards',\r\n      },\r\n    ],\r\n  };\r\n\r\n  // Create an AdaptiveCard instance\r\n  var adaptiveCard = new AdaptiveCards.AdaptiveCard();\r\n\r\n  // Set its hostConfig property unless you want to use the default Host Config\r\n  // Host Config defines the style and behavior of a card\r\n  adaptiveCard.hostConfig = new AdaptiveCards.HostConfig({\r\n    fontFamily: 'Segoe UI, Helvetica Neue, sans-serif',\r\n    ...config,\r\n    // More host config options\r\n  });\r\n\r\n  // Set the adaptive card's event handlers. onExecuteAction is invoked\r\n  // whenever an action is clicked in the card\r\n  adaptiveCard.onExecuteAction = (action) => {\r\n    alert('Ow!');\r\n    postBack('sample:password-input');\r\n  };\r\n\r\n  // Parse the card payload\r\n  adaptiveCard.parse(card);\r\n\r\n  // Render the card to an HTML element:\r\n  var renderedCard = adaptiveCard.render();\r\n\r\n  return (\r\n    <div\r\n      ref={(n) => {\r\n        n && n.childNodes.length === 0 && n.appendChild(renderedCard);\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { PasswordCard } from './password-card';\r\nconst activityMiddleware = () => (next) => ({\r\n  activity,\r\n  nextVisibleActivity,\r\n  ...otherArgs\r\n}) => {\r\n  const { name, type } = activity;\r\n\r\n  if (type === 'event' && name === 'passwordInput') {\r\n    return () => <PasswordCard config={{}} />;\r\n  } else {\r\n    return next({ activity, nextVisibleActivity, ...otherArgs });\r\n  }\r\n};\r\n\r\nconst attachmentMiddleware = () => (next) => (card) => {\r\n  switch (card.attachment.contentType) {\r\n    case 'application/vnd.microsoft.botframework.samples.github-repository':\r\n      return <div>{card.attachment.content.owner} </div>;\r\n\r\n    default:\r\n      return next(card);\r\n  }\r\n};\r\n\r\nexport { activityMiddleware, attachmentMiddleware };\r\n","import React, { useEffect, useMemo } from 'react';\r\nimport ReactWebChat, {\r\n  createDirectLine,\r\n  createStyleSet,\r\n} from 'botframework-webchat';\r\n\r\nimport './WebChat.css';\r\nimport { activityMiddleware, attachmentMiddleware } from './cards';\r\n\r\nconst WebChat = ({ className, onFetchToken, store, token }) => {\r\n  const directLine = useMemo(() => createDirectLine({ token }), [token]);\r\n\r\n  const styleSet = useMemo(\r\n    () =>\r\n      createStyleSet({\r\n        backgroundColor: 'Transparent',\r\n      }),\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    onFetchToken();\r\n  }, [onFetchToken]);\r\n\r\n  store.dispatch({\r\n    type: 'WEB_CHAT/SET_SEND_BOX',\r\n    payload: { text: 'sample:password-input' },\r\n  });\r\n\r\n  return token ? (\r\n    <ReactWebChat\r\n      activityMiddleware={activityMiddleware}\r\n      attachmentMiddleware={attachmentMiddleware}\r\n      className={`${className || ''} web-chat`}\r\n      directLine={directLine}\r\n      store={store}\r\n      styleSet={styleSet}\r\n    />\r\n  ) : (\r\n    <div className={`${className || ''} connect-spinner`}>\r\n      <div className=\"content\">\r\n        <div className=\"icon\">\r\n          <span className=\"ms-Icon ms-Icon--Robot\" />\r\n        </div>\r\n        <p>Please wait while we are connecting.</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WebChat;\r\n","import React, { useMemo, useState, useCallback } from 'react';\nimport { createStore, createStyleSet } from 'botframework-webchat';\nimport WebChat from './WebChat';\n\nexport const App = () => {\n  const store = useMemo(\n    () =>\n      createStore({}, ({ dispatch }) => (next) => (action) => {\n        if (action.type === 'DIRECT_LINE/CONNECT_FULFILLED') {\n          dispatch({\n            type: 'WEB_CHAT/SEND_EVENT',\n            payload: {\n              name: 'webchat/join',\n              value: {\n                language: window.navigator.language,\n              },\n            },\n          });\n        } else if (action.type === 'DIRECT_LINE/INCOMING_ACTIVITY') {\n          if (action.payload.activity.from.role === 'bot') {\n            setNewMessage(true);\n          }\n        }\n\n        return next(action);\n      }),\n    []\n  );\n\n  const styleSet = useMemo(\n    () =>\n      createStyleSet({\n        backgroundColor: 'Transparent',\n      }),\n    []\n  );\n\n  const [, setNewMessage] = useState(false);\n  const [token, setToken] = useState();\n\n  const handleFetchToken = useCallback(async () => {\n    if (!token) {\n      const res = await fetch(\n        'https://webchat-mockbot.azurewebsites.net/directline/token',\n        { method: 'POST' }\n      );\n      const { token } = await res.json();\n\n      setToken(token);\n    }\n  }, [setToken, token]);\n\n  return (\n    <WebChat\n      className=\"react-web-chat\"\n      onFetchToken={handleFetchToken}\n      store={store}\n      styleSet={styleSet}\n      token={token}\n    />\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}